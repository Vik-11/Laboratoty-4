open System

type Tree =
    | Empty
    | Node of int * Tree * Tree

let rec insert value tree =
    match tree with
    | Empty -> Node(value, Empty, Empty)
    | Node(v, left, right) ->
        if value < v then Node(v, insert value left, right)
        else Node(v, left, insert value right)

let rec printTree tree ind =
    match tree with
    | Empty -> ()
    | Node(value, left, right) ->
        printTree right (ind + 4)
        printfn "%s%d" (String.replicate ind " ") value
        printTree left (ind + 4)

let rec getNumb() = 
    let q = Console.ReadLine()
    match Int32.TryParse(q) with
    | (true, value) when value > 0-> value
    | _ ->
        printfn "Input error: Try integer greater than 0"
        getNumb()

printf "Enter quantity of numbers: "
let q = getNumb()
    
let num =
    [for _ in 1 .. q do
       printf "Enter number: "
       yield  getNumb()
    ]
    
let tree = List.fold (fun acc num -> insert num acc) Empty num

let rec inOrder tree = 
    match tree with
    | Empty -> []
    | Node(_, left, right) ->
        inOrder left @ [tree] @ inOrder right

let leavesList =
    inOrder tree |> List.fold (fun acc node ->
        match node with
        | Node(_, Empty, Empty) -> acc @ [node]
        | _ -> acc) []

printfn "Binary Search Tree:" 
printTree tree 0
printfn "List of Leaves: %A" leavesList
