open System

type Tree =
    | Empty
    | Node of int * Tree * Tree

let rec insert value tree =
    match tree with
    | Empty -> Node(value, Empty, Empty)
    | Node(v, left, right) ->
        if value < v then Node(v, insert value left, right)
        else Node(v, left, insert value right)

let rec printTree tree ind =
    match tree with
    | Empty -> ()
    | Node(value, left, right) ->
        printTree right (ind + 4)
        printfn "%s%d" (String.replicate ind " ") value
        printTree left (ind + 4)

let rec getNumb() = 
    let q = Console.ReadLine()
    match Int32.TryParse(q) with
    | (true, value) when value > 0-> value
    | _ ->
        printfn "Input error: Try integer greater than 0"
        getNumb()

printf "Enter quantity of numbers: "
let q = getNumb()
    
let rec buildFoldTree n tree =
    if n = 0 then tree
    else 
       printfn "Enter number: "
       let num = getNumb()
       buildFoldTree (n - 1) (insert num tree)

let rec foldForTree tree acc =
    match tree with 
    | Empty -> acc
    | Node(v, Empty, Empty) -> tree :: acc
    | Node(_, left, right) -> foldForTree left (foldForTree right acc)

let tree = buildFoldTree q Empty
let leavesList = foldForTree tree []

printfn "Binary Search Tree:" 
printTree tree 0
printfn "List of Leaves: %A" leavesList


